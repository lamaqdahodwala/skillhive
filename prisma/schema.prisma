generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  comments      Comment[]
  lessons       Lesson[]
  pollVotes     PollOption[] @relation("PollOptionToUser")
  watching      Tag[]        @relation("TagToUser")
  notebook      Notebook?  @relation("notebookToUser")

  lessonVotes Lesson[] @relation("upvotes")
}

model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  text        String
  authorId    Int
  upvotes     User[]    @relation(name: "upvotes")
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[] @relation("CommentToLesson")
  Page        Page[]    @relation("LessonToPage")
  Quiz        Quiz[]    @relation("LessonToQuiz")
  tags        Tag[]     @relation("LessonToTag")
}

model Tag {
  id       Int      @id @default(autoincrement())
  tagName  String   @unique
  Lesson   Lesson[] @relation("LessonToTag")
  watchers User[]   @relation("TagToUser")
}

model Comment {
  id          Int      @id @default(autoincrement())
  commentText String
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  Lesson      Lesson[] @relation("CommentToLesson")
}

model Quiz {
  id        Int            @id @default(autoincrement())
  questions QuizQuestion[]
  Lesson    Lesson[]       @relation("LessonToQuiz")
}

model QuizQuestion {
  id           Int          @id @default(autoincrement())
  questionText String
  quizId       Int
  quizAnswers  QuizAnswer[]
  quiz         Quiz         @relation(fields: [quizId], references: [id])
}

model QuizAnswer {
  id              Int          @id @default(autoincrement())
  answerText      String
  isCorrectAnswer Boolean
  questionId      Int
  question        QuizQuestion @relation(fields: [questionId], references: [id])
}

model UserPoll {
  id           Int          @id @default(autoincrement())
  pollQuestion String
  pollOptions  PollOption[] @relation("PollOptionToUserPoll")
}

model PollOption {
  id       Int        @id @default(autoincrement())
  text     String
  votes    User[]     @relation("PollOptionToUser")
  UserPoll UserPoll[] @relation("PollOptionToUserPoll")
}

model Notebook {
  id       Int    @id @default(autoincrement())
  pages    Page[] @relation("NotebookToPage")
  authorId Int    @unique
  author   User @relation(fields: [authorId], references: [id], name: "notebookToUser")
}

model Page {
  id         Int      @id @default(autoincrement())
  text       String
  onLesson   Lesson   @relation("LessonToPage", fields: [lessonId], references: [id])
  Notebook   Notebook @relation("NotebookToPage", fields: [notebookId], references: [id])
  lessonId   Int
  notebookId Int
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
